3:I[5907,["355","static/chunks/355-2049f01d48957a13.js","185","static/chunks/app/layout-604e68edd6718126.js"],"default"]
4:I[6029,["355","static/chunks/355-2049f01d48957a13.js","185","static/chunks/app/layout-604e68edd6718126.js"],"default"]
5:I[7889,["355","static/chunks/355-2049f01d48957a13.js","185","static/chunks/app/layout-604e68edd6718126.js"],"default"]
6:I[9275,[],""]
7:I[1343,[],""]
8:I[9274,["355","static/chunks/355-2049f01d48957a13.js","185","static/chunks/app/layout-604e68edd6718126.js"],"default"]
0:["HLXZhzypeKK1_zeIysBnr",[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},[["$","html",null,{"lang":"ko","children":["$","body",null,{"className":"__variable_f2e746 __variable_a1247c __variable_97d210","children":["$","$L3",null,{"children":["$","$L4",null,{"children":[["$","$L5",null,{}],["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":[],"styles":null}],["$","$L8",null,{}]]}]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/about-us/_next/static/css/04fef0f9f5414cd9.css","precedence":"next","crossOrigin":"$undefined"}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"서재완 포트폴리오"}],["$","meta","3",{"name":"description","content":"Generated by create next app"}],["$","link","4",{"rel":"icon","href":"/about-us/favicon.ico","type":"image/x-icon","sizes":"16x16"}]]
1:null
a:I[6971,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
b:I[9951,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
c:I[1716,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
d:I[1299,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
e:I[4923,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
f:I[9934,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
10:I[626,["866","static/chunks/e37a0b60-b74be3d42787b18d.js","355","static/chunks/355-2049f01d48957a13.js","974","static/chunks/974-9e79ff185da30738.js","931","static/chunks/app/page-e58f20204e37ee86.js"],"default"]
2:["$","main",null,{"children":[["$","$La",null,{"as":"article","position":"relative","zIndex":"3","backgroundColor":"#fff","height":"100vh","children":["$","$Lb",null,{}]}],["$","$Lc",null,{}],["$","$Ld",null,{}],["$","$La",null,{"as":"article","position":"relative","zIndex":2,"display":"flex","backgroundColor":"#fff","tabletFlexDirection":"column","width":"100%","children":[["$","$Le",null,{}],["$","$Lf",null,{"blogData":[{"title":"Scope Chain과 Closure, HOF","createdAt":"2024.10.16","link":"https://bum-developer.tistory.com/entry/Scope-Chain%EA%B3%BC-Closure-HOF","content":"Scope Chain ( 스코프 체인 ) 현재 실행되고 있는 위치에 필요한 값이 있는지 확인하고 없다면 상위 스코프를 찾아 올라가는 과정을 스코프 체인이라고 한다. function aaa(){    banana = 3    console.log(banana)}aaa();위 코드가 브라우저상에서 어떻게 실행될까? 자세하게 알아보기 위해서는 개발자 도구의 source를 통해서 확인이 가능하다. 먼저 실행해야 하는 곳에 브레이크 포인트 ( 11번 라인 )를 걸어둔다. 브레이크 포인트는 코드가 빠르게 실행되다가 멈추고 싶은 코드에서 멈추게 할 수 있는 기능이다.  1번 버튼은 실행하지 않고 뛰어넘는 것이고, 2번 버튼은 실행 과정을 하나하나 살펴볼 수 있다.  aaa 함수에 브레이크 포인트를 걸어두고 함수 안으..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbR5tDp%2FbtsJPOCdT0J%2FyBvgsk9lgIivRL4FiAixKK%2Fimg.png"},{"title":"RequestAnimationFrame","createdAt":"2024.10.12","link":"https://bum-developer.tistory.com/entry/RequestAnimationFrame","content":"특정 함수를 반복해서 호출하는 경우 어떤 방법을 많이 사용할까? 다른 사람은 어떨지 모르겠지만 본인은 setInterval을 많이 사용해서 구현한다.  하지만 애니메이션을 구현할 때 setInterval을 사용한다면 성능을 저하하는 문제가 발생할 수 있다. 그때 대신 사용하는 것이 Request Animation Frame이다.  어떤 문제가 발생하는 것일까? 웹사이트의 화면은 여러 프레임으로 보여진다. 홈페이지를 스크롤 했을 때 16.7ms 마다 새로운 프레임이 생성되는 것을 볼 수 있다. 브라우저는 1초에 60프레임 지원하기 때문에 16.7ms 이 단순 계산으로도 맞다.  즉, 브라우저에 애니메이션이 매끄럽게 보여지기 위해서는 16.7ms 안에 1frame 화면에 그려져야 한다는 것이다. 그렇지 않으..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FczXNr5%2FbtsJwN4r2Zn%2FK11DuIWTl4uFuiVTiwWgxK%2Fimg.png"},{"title":"Transition & Animation 이벤트","createdAt":"2024.10.9","link":"https://bum-developer.tistory.com/entry/Transition-Animation-%EC%9D%B4%EB%B2%A4%ED%8A%B8","content":"Transition자바스크립트의 클릭 이벤트를 사용해서 클릭한 위치를 확인할 수 있다. window.addEventListener(\"click\", function (e) {  console.log(e.clientX, e.clientY);}); 클릭한 위치에 동그란 오브젝트를 이동시키는 애니메이션을 만들려면 어떻게 해야할까? 우선 동그란 오브젝트를 먼저 만들어주자면 다음과 같이 만들 수 있다.               너비와 높이가 30px인 붉은 공이다. 그리고 애니메이션이 발생했을 때 진행되는 속도는 1초로 설정해두었다. const ballElem = document.querySelector(\".ball\");window.addEventListener(\"click\", function (e) {  ball..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcNe7b3%2FbtsJ9mLP9m5%2FsfvFkhaKm5YcqfMn5Ikye0%2Fimg.png"},{"title":"단방향 암호화와 양방향 암호화","createdAt":"2024.10.5","link":"https://bum-developer.tistory.com/entry/%EB%8B%A8%EB%B0%A9%ED%96%A5-%EC%95%94%ED%98%B8%ED%99%94%EC%99%80-%EC%96%91%EB%B0%A9%ED%96%A5-%EC%95%94%ED%98%B8%ED%99%94","content":"홈페이지에서 사용자가 로그인을 하고, 로그인 정보를 fetch 했을 때 브라우저에서 비밀번호를 fetch할 수 없어야 한다. 즉, 비밀번호를 알아내는 것이 불가능해야 한다.  DB에 있는 비밀번호를 알 수 있게 된다면, 해커가 DB를 해킹했을 때 민감한 정보에 접근이 가능하게 된다. 또한 다른 사이트에서도 동일한 아이디와 비밀번호를 사용하는 경우 문제가 더 심각해진다.  따라서 비밀번호나 계좌번호같은 민감한 정보를 백엔드에 저장할 때 그대로 저장하지 않는다. 양방향 암호화 양방향 암호화는 JWT같은 복호화가 되는 암호화를 말한다. 즉, 암호화와 복호화 모두 할 수 있는 암호화 방법이다. DB에 양방향 암호화 방식을 사용한다면 만약 데이터베이스가 털리게 된다면 홈페이지를 통해서 비밀번호를 추측할 수 있게 ..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FuWx61%2FbtsJvsk5vgB%2FvCinDybHmbuCflD6aL7KT0%2Fimg.png"},{"title":"웹사이트 로그인의 역사","createdAt":"2024.10.2","link":"https://bum-developer.tistory.com/entry/%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8-%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%98-%EC%97%AD%EC%82%AC","content":"첫 번째 로그인브라우저에서 email과 password를 가지고 로그인 요청을 백엔드로 보낸다면 백엔드는 해당 유저가 존재하는지 DB를 확인하고 있다면 session에 저장을 한다. session에 저장할 때 특정 id를 부여하는데, 브라우저에 response로 넘겨준다.  이렇게 보내진 id는 해당 유저가 누구인지 식별할 때 사용된다. 하지만 유저의 정보를 백엔드 서버에서 받기 때문에 한번에 여러명의 정보를 받으면 session의 한계가 존재하기 때문에 문제가 발생한다.  이것을 해결하기 위해서 백엔드 서버의 성능상 한계가 있기 때문에 scale-up을 통해 컴퓨터 성능을 올려주었다. scale-up→ 컴퓨터 성능(cpu, memory 등)을 올려주는 작업두 번째 로그인 백엔드 컴퓨터의 성능을 오려주었..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FKxnQn%2FbtsJvyrZEap%2Fl7beBmMz28TrcruP8Jdiv0%2Fimg.png"},{"title":"스크롤 위치에 따른 오브젝트 조작","createdAt":"2024.9.29","link":"https://bum-developer.tistory.com/entry/%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%9C%84%EC%B9%98%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EC%A1%B0%EC%9E%91","content":"홈페이지를 만들 때 스크롤에 따른 이벤트는 아주 많이 사용된다.지금까진 제대로 컨트롤하는 방법을 몰라서 라이브러리 등을 사용해서 만들었는데, 요즘 트렌드에는 스크롤 이벤트가 워낙 많이 들어가서 직접 사용하는 방법에 대해서 알아보려고 한다.  특정 라이브러리가 아닌 순수 자바스크립트의 기능을 사용해서 구현해보려고 한다.  속성이벤트를 구현하기 전에 사용할 수 있는 속성이 어떤 것들이 있는지 알아보자. (function () {  const outputEle = document.querySelector(\".output\");  window.addEventListener(\"scroll\", function (e) {    outputEle.innerHTML = window.innerHeight;  });})();..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbwHJtY%2FbtsJoObHYKA%2FhOC3Y7WVMhqiq8ecKwktWK%2Fimg.png"},{"title":"얕은 복사 & 깊은 복사","createdAt":"2024.9.25","link":"https://bum-developer.tistory.com/entry/%EC%96%95%EC%9D%80-%EB%B3%B5%EC%82%AC-%EA%B9%8A%EC%9D%80-%EB%B3%B5%EC%82%AC","content":"배열이나 객체를 사용할 때 특정 배열을 복사하거나 새롭게 만들기 위해서 복사를 하는 경우가 있다. 이때 경우에 따라 예상치 못한 작업이 발생하는데, 이것이 얕은 복사로 인한 문제들이다.  얕은 복사주소값까지만 복사를 해주는 것이 얕은 복사이다. const object = {  name: \"잉여\",  age: \"28\",};const newObject = { ...object };console.log(newObject);객체를 복사할 때 많이 사용하는 방식이 spread 연산자를 활용하는 방식이다. 이렇게 하면 object의 주소값만 복사하는 것이 아닌 내부값을 새롭게 복사하기 때문에 newObject의 name이 변경되더라도 object의 name은 변화가 없다.  이렇게보면 이 행위 자체가 얕은 복사가 ..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcDcOKy%2FbtsJnXGh5MM%2FOrIilzToAxFX1eLkrfpeL0%2Fimg.png"},{"title":"Object","createdAt":"2024.9.21","link":"https://bum-developer.tistory.com/entry/Object","content":"자바스크립트에서 숫자, 문자, 참/거짓 등 기본 데이터 타입을 제외한 모든 타입은 Object, 객체 타입이다.  const person1 = {  name: \"잉여인간\",  age: 28,  introduce: function () {    console.log(\"안녕! 나는 잉여인간이야. 나이는 28이고!\");  },};이런 형식으로 중괄호를 사용해서 만들 수 있다. 여기서 두 번째 사람을 만들고 싶다면 아래와 같이 만들 수 있다. const person1 = {  name: \"잉여인간\",  age: 28,  introduce: function () {    console.log(\"안녕! 나는 잉여인간이야. 나이는 28이고!\");  },};const person2 = {  name: \"열심인간\",  ..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdzGc0c%2FbtsJo3k6pSh%2Fdl5x83MqNqhXb0RNs1s1r1%2Fimg.png"},{"title":"GitHub Action Lighthouse","createdAt":"2024.9.18","link":"https://bum-developer.tistory.com/entry/GitHub-Action-Lighthouse-1","content":"GitHub Action에 대해서는 앞서 어떤 요소들이 있는지 알아봤다. 최종적으로 나 역시 CI / CD를 구축하는 것을 목표로 GitHub Action을 사용하려고 한다.  CI의 베이스가 되는 브랜치 전략으로 Git Flow를 사용하려고 한다. GitHub Flow 등도 있을 텐데 최초 브랜치 전략을 공부할 때 Git Flow를 알아봤었고 아직까지 많이 사용되는 전략이라서 굳이 다른 방향을 알아보진 않았다.  어떤 방향으로 GitHub Action을 사용할 것인가!  이게 중요할 것 같은데, Git Flow를 이야기하는 이유는 브랜치의 속성에 따라 Action을 설정해줄 생각이다. 내가 사용할 브랜치로Main : 프로젝트 | 서비스의 메인 브랜치로 정식 배포가 된 환경의 브랜치다. Develop :..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcYRL8L%2FbtsIDJWIjH1%2FZejyCPhivVYxMZx3Oj5IFk%2Fimg.png"},{"title":"GitHub Action PR 검사","createdAt":"2024.9.14","link":"https://bum-developer.tistory.com/entry/GitHub-Action-PR-%EA%B2%80%EC%82%AC","content":"GitHub Action에 대해서는 앞서 어떤 요소들이 있는지 알아봤다. 최종적으로 나 역시 CI / CD를 구축하는 것을 목표로 GitHub Action을 사용하려고 한다.  CI의 베이스가 되는 브랜치 전략으로 Git Flow를 사용하려고 한다. GitHub Flow 등도 있을 텐데 최초 브랜치 전략을 공부할 때 Git Flow를 알아봤었고 아직까지 많이 사용되는 전략이라서 굳이 다른 방향을 알아보진 않았다.  어떤 방향으로 GitHub Action을 사용할 것인가!  이게 중요할 것 같은데, Git Flow를 이야기하는 이유는 브랜치의 속성에 따라 Action을 설정해줄 생각이다. 내가 사용할 브랜치로Main : 프로젝트 | 서비스의 메인 브랜치로 정식 배포가 된 환경의 브랜치다. Develop :..","thumbnail":"https://img1.daumcdn.net/thumb/R800x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb4wKG8%2FbtsIzrg5plk%2FLpsxKxf0RIyVBXTSKmmrUk%2Fimg.png"}]}]]}],["$","$L10",null,{}]]}]
